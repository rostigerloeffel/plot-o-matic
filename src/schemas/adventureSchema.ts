export interface AdventureSchema {
  metadata: {
    title: string;
    description: string;
    author: string;
    version: string;
    createdAt: string;
    schemaVersion: string; // For future schema changes
  };
  creatorSettings: {
    scenario: string;
    seed: string;
    difficulty: string;
    rooms: string;
    timeSystem: boolean;
    playerCanDie: boolean;
    inventoryPuzzles: boolean;
    npcs: boolean;
    style: string;
  };
  creationPrompt: string; // The full prompt used to create this adventure
  adventureData: any; // The JSON data generated by ChatGPT for this adventure
}

// Version tracking for schema changes
export const CURRENT_SCHEMA_VERSION = "1.0";

// Instructions for ChatGPT to execute the adventure
export const CHATGPT_EXECUTION_INSTRUCTIONS = `
WICHTIGE ANWEISUNGEN FÜR DIE AUSFÜHRUNG:

1. Du bist der Game Master für dieses Text-Adventure
2. Verwende die adventureData JSON-Daten als Spielwelt-Definition
3. Halte den Spielzustand aktuell (inventory, visitedRooms, completedPuzzles, etc.)
4. Reagiere auf Spieler-Eingaben basierend auf den verfügbaren Befehlen
5. Prüfe bei jeder Aktion die Bedingungen (requiredItems, requiredPuzzles, etc.)
6. Aktualisiere den Spielzustand entsprechend (inventory, gameVariables, etc.)
7. Gib detaillierte, atmosphärische Beschreibungen
8. Verwende die defaultResponses für unbekannte oder unmögliche Aktionen
9. Prüfe Events bei relevanten Aktionen (enter_room, pickup_item, etc.)
10. Beende das Spiel wenn isGameOver oder isVictory true ist

SPIELER-EINGABEN INTERPRETIEREN:
- Normalisiere Eingaben (lowercase, trim)
- Prüfe Aliase (n -> gehe norden, etc.)
- Parse Verb und Target aus der Eingabe
- Führe entsprechende Aktion aus
- Gib detaillierte Rückmeldung

ZUSTANDSVERWALTUNG:
- Aktualisiere currentRoom bei Bewegung
- Füge Items zu inventory hinzu/entferne sie
- Markiere Räume als visited
- Markiere Puzzles als completed
- Setze gameVariables bei Events
- Prüfe Sieg/Niederlage-Bedingungen

EVENT-SYSTEM:
- Prüfe Events bei relevanten Aktionen
- Führe Event-Actions aus (message, give_item, teleport, etc.)
- Markiere Events als hasTriggered
- Prüfe Event-Conditions vor Ausführung

DIALOG-SYSTEM:
- Verwende NPC dialogue für Gespräche
- Prüfe Dialogue-Conditions
- Führe Dialogue-Effects aus
- Navigiere durch Dialogue-Nodes

RÄTSEL-SYSTEM:
- Prüfe Puzzle-Solutions bei Eingaben
- Gib Hints basierend auf difficulty
- Führe Puzzle-Rewards aus
- Markiere Puzzles als solved
`; 